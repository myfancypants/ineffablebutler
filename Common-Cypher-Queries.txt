Common Cypher Queries


// Returns all users connected to a specific stop
match (n {name:3})-[:User]-(b) where b:Person return b

// returns all users connected to a specific stop n layers deep. n can be any specificed depth
match (n {name:3})-[:User*1..n]-(b) where b:Person return b

// returns all nodes of a wildcard Route Name although includes both In/outbound routes
match (n)-[r]-(a) where type(r) =~ "L_.*" return n,a

// returns all nodes of a route name of a specified in/outbound
match (n)-[r]-(a) where type(r) =~ "L_L.*I.*" return n,a

// returns all nodes of a specified stop n layers deep. Also includes stops not on intended route
match (n)-[*1..3]-(a:Stop) where n.name = "L" return n,a


// matches for a partialy known relationship name and a partial node name through a 3 layer traversal
match (n)-[r]-(a) where type(r) =~ "F_.*I.*" and n.name =~ "Market.*5th.*" match (n)-[*1..3]-(b) return n,b


// matches all nodes connected by a relationship when only a partial match is known
match (n)-[r]-(a) where type(r) =~ "25_.*" return n,a

// shows and displays every relationship for a specific user
match (n:User {displayName: "Shanan Sussman"})-[r]-() return r,type(r)

// shows all user friends
match (n:User {name: "Shanan Sussman"})-[:Friends]-(a) return a,b 

// shows all user routes
match (n:User {displayName: "Shanan Sussman"})-[r]-(a:Route) return n,a

// shows only friends with a shared route
match (n:User {displayName: "Shanan Sussman"})-[r]-(b:Route) 
match (n)-[:Friends]-(z:User)
match (z)-[s]-(c:Route)
match (n)-[:Friends]-(z) where type(r) = type(s) return n,z, type(r)

// prove that they are shared
match (n)-[r]-(a) where type(r) =~ "25_.*" return n,a

// show traversal 5 layers deep over all nodes
match (n:Stop {stopCode: "17617"})-[*1..5]-(a) return n,a

